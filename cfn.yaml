AWSTemplateFormatVersion: '2010-09-09'
Description: 'The AWS stack for Todo App'
Parameters:
  SoftwareVersion:
    Type: String
    Description: 'The software version'
  RdsPassword:
    Type: String
    Description: 'The RDS password'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: CostObject
          Value: TodoApp
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Join [ "", [!Ref 'AWS::Region', a]]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TodoAppA
        - Key: CostObject
          Value: TodoApp
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Join [ "", [!Ref 'AWS::Region', b]]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TodoAppB
        - Key: CostObject
          Value: TodoApp
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: TodoAppIGW
        - Key: CostObject
          Value: TodoApp
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TodoApp-Routing
        - Key: CostObject
          Value: TodoApp
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable
  SubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PublicRouteTable
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for load balancer'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub |
              TodoApp-Routing
        - Key: CostObject
          Value: TodoApp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  RdsInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for rds instances'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub |
              TodoApp-Routing
        - Key: CostObject
          Value: TodoApp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref ServerSecurityGroup
  ServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for servers'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub |
              TodoApp-Routing
        - Key: CostObject
          Value: TodoApp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  CloudWatchLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ArticleAppInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'rds:ListTagsForResource'
                Resource: '*'
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !GetAtt [CloudWatchLogGroup, Arn]
              - Action:
                  - 'cloudformation:SignalResource'
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - Action:
                  - 'cloudformation:ListStackResources'
                  - 'cloudformation:DescribeStackResources'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'autoscaling:*'
                Effect: Allow
                Resource: '*'
  IAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
  ExternalELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '8080'
          InstanceProtocol: HTTP
          Protocol: HTTP
      HealthCheck:
        Target: 'TCP:8080'
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '6'
        Timeout: '5'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Tags:
        - Key: CostObject
          Value: TodoApp
  DbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB subnet'
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
  RdsInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: 'demo'
      DBSubnetGroupName: !Ref DbSubnetGroup
      MultiAZ: true
      BackupRetentionPeriod: 7
      AllocatedStorage: 5
      DBInstanceClass: 'db.t2.micro'
      DBInstanceIdentifier: rdsinstance
      Engine: MySQL
      EngineVersion: '5.5'
      MasterUsername: admin
      MasterUserPassword: !Ref RdsPassword
      VPCSecurityGroups:
        - !Ref RdsInstanceSecurityGroup
      Tags:
        -
          Key: "Name"
          Value: "My SQL Database"
    DeletionPolicy: "Snapshot"
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: '8'
      EbsOptimized: false
      InstanceMonitoring: false
      IamInstanceProfile: !Ref IAMInstanceProfile
      ImageId: ami-c90bf8a6
      InstanceType: t2.nano
      SecurityGroups:
        - !Ref ServerSecurityGroup
      UserData:
        'Fn::Base64': !Sub
          - |
            #cloud-config
            ssh_authorized_keys:
              - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDw7ifk0cFD7rvJeXAwRjSXFhOz4i1GJt0SMwUlDZuSgokGb9aI6pea4UqtWfadlk57Rwlrr3xLFwAJxYBiSgpUSJBfaaeDEJOo4NS1dpXl1OpV/be8daKUgWIyn/oqSxfQCII7HCZyEnakefKm+wlFgWoAv+WujVgTtBwL76+ed1Rt/643Hoek2/6vpI9d6T+HaEtVCT6TDQOqJu1vidvK6s7zLoETRI6j8k269tNxVr5zw2tpHQHN6xD7T3lV05roXR5qwtJsM+yO9L5q37Mht+y5olCb1jeHyxeGcPEeIHe/6DeVFUa7Pa2ErStUE73Gi5DOnIWcgkerpkNixq5h tf.pack@googlemail.com"
            coreos:
              units:
                - name: update-engine.service
                  command: stop
                - name: locksmithd.service
                  command: stop
                - name: "todo.service"
                  command: "start"
                  content: |
                    [Unit]
                    Description=Todo App
                    After=docker.service

                    [Service]
                    Restart=always
                    ExecStartPre=-/usr/bin/docker kill todo
                    ExecStartPre=-/usr/bin/docker rm todo
                    ExecStartPre=/bin/bash -c 'eval $(docker run --rm -e AWS_DEFAULT_REGION=eu-central-1 crewjam/awscli:latest aws ecr get-login --region eu-central-1)'
                    ExecStartPre=-/usr/bin/docker pull furikuri/spring-aws-todo
                    ExecStop=/usr/bin/docker stop -t 2 todo
                    ExecStartPost=-/usr/bin/docker run --rm crewjam/awscli:latest cfn-signal \
                              -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region eu-central-1
                    ExecStart=/usr/bin/docker run --restart=always \
                              -p 8080:8080 --name todo \
                              --log-driver awslogs --log-opt awslogs-region=${AWS::Region} --log-opt awslogs-group=${CloudWatchLogGroup} \
                              -e "DB_PASSWORD=${DbPassword}" \
                              furikuri/spring-aws-todo:${DockerTag}
          - DockerTag: !Ref SoftwareVersion
            DbPassword: !Ref RdsPassword
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LoadBalancerNames:
        - !Ref ExternalELB
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: '2'
      MinSize: '1'
      Tags:
        - Key: CostObject
          Value: TodoApp
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
Outputs:
  LoadBalancer:
    Description: 'The ELB address'
    Value: !GetAtt [ExternalELB, DNSName]